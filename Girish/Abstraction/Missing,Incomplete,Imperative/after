import discord4j.core.DiscordClientBuilder;
import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import discord4j.core.event.domain.lifecycle.ReadyEvent;
import discord4j.core.object.command.ApplicationCommandOption;
import discord4j.discordjson.json.ApplicationCommandOptionData;
import discord4j.discordjson.json.ApplicationCommandRequest;
import discord4j.rest.RestClient;
import reactor.core.publisher.Mono;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class Program {

    public static void main(String[] args) throws Exception {
        var token = getToken();

        var slashCommandHandler = new SlashCommandHandler();

        DiscordClientBuilder.create(token)
                .build()
                .withGateway(gateway -> {
                    var printOnLogin = printLoginDetails(gateway);
                    var handleSlash = handleSlashCommands(gateway, slashCommandHandler);
                    var registerCmds = registerCommands(gateway.getRestClient());

                    return printOnLogin.and(handleSlash).and(registerCmds);
                })
                .block();
    }

    private static String getToken() throws Exception {
        return Optional.ofNullable(System.getenv("TOKEN"))
                .orElseThrow(() -> new Exception("Bot token not found."));
    }

    private static Mono<Void> printLoginDetails(GatewayDiscordClient gateway) {
        return gateway.on(ReadyEvent.class)
                .flatMap(event -> {
                    var self = event.getSelf();
                    System.out.printf("Logged in as %s#%s%n", self.getUsername(), self.getDiscriminator());
                    return Mono.empty();
                });
    }

    private static Mono<Void> handleSlashCommands(GatewayDiscordClient gateway, SlashCommandHandler slashCommandHandler) {
        return gateway.on(ChatInputInteractionEvent.class, slashCommandHandler::handle)
                .then();
    }

    private static Mono<Void> registerCommands(RestClient client) {
        return client.getApplicationId()
                .flatMap(appId -> {
                    var qrCommandRequest = createCommandRequest("qr", "encode some text into a QR image",
                            createOption("text", "text to encode", ApplicationCommandOption.Type.STRING.getValue(), true));

                    var qrSaveRequest = createCommandRequest("qrsave", "save a QR with a name",
                            createOption("text", "text to encode", ApplicationCommandOption.Type.STRING.getValue(), true),
                            createOption("name", "a unique name to save your QR", ApplicationCommandOption.Type.STRING.getValue(), true));

                    var qrLoadRequest = createCommandRequest("qrload", "load a saved QR",
                            createOption("name", "the name of your saved QR", ApplicationCommandOption.Type.STRING.getValue(), true));

                    var commands = List.of(qrCommandRequest, qrSaveRequest, qrLoadRequest);

                    return client.getApplicationService()
                            .bulkOverwriteGlobalApplicationCommand(appId, commands)
                            .then();
                });
    }

    private static ApplicationCommandRequest createCommandRequest(String name, String description, ApplicationCommandOptionData... options) {
        return ApplicationCommandRequest.builder()
                .name(name)
                .description(description)
                .addOptions(options)
                .build();
    }

    private static ApplicationCommandOptionData createOption(String name, String description, int type, boolean required) {
        return ApplicationCommandOptionData.builder()
                .name(name)
                .description(description)
                .type(type)
                .required(required)
                .build();
    }
}

public class QrData {
    private Map<String, String> savedData = new HashMap<>();

    public void store(String name, String content) {
        savedData.put(name, content);
    }

    public Optional<String> retrieve(String name) {
        return Optional.ofNullable(savedData.get(name));
    }

    public boolean delete(String name) {
        return savedData.remove(name) != null;
    }

    public boolean contains(String name) {
        return savedData.containsKey(name);
    }

    public void clear() {
        savedData.clear();
    }

    public int getSize() {
        return savedData.size();
    }
}
